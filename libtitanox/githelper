#!/usr/bin/env bash

RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
MAGENTA="\033[0;35m"
NC="\033[0m"

check_repo() {
    git rev-parse --is-inside-work-tree &>/dev/null || { echo -e "${RED}Not a git repo!${NC}"; exit 1; }
}

status() {
    branch=$(git rev-parse --abbrev-ref HEAD)
    git fetch origin "$branch" &>/dev/null
    ahead=$(git rev-list --count "$branch"..origin/"$branch")
    behind=$(git rev-list --count origin/"$branch".."$branch")
    unstaged=$(git diff --name-only)
    untracked=$(git ls-files --others --exclude-standard)

    echo -e "${BLUE}Branch: $branch${NC}"
    [[ $ahead -gt 0 ]] && echo -e "${GREEN}↑ $ahead commit(s) ahead${NC}"
    [[ $behind -gt 0 ]] && echo -e "${RED}↓ $behind commit(s) behind${NC}"
    [[ $ahead -eq 0 && $behind -eq 0 ]] && echo -e "${GREEN}Up to date with origin/$branch${NC}"
    [[ -n $unstaged ]] && echo -e "${YELLOW}• Unstaged changes${NC}"
    [[ -n $untracked ]] && echo -e "${YELLOW}• Untracked files${NC}"
}

commit_changes() {
    status
    read -rp "Commit message: " msg
    [[ -z $msg ]] && msg="Update"
    git add . &>/dev/null
    git diff --cached --quiet && echo -e "${YELLOW}Nothing to commit${NC}" && return
    git commit -m "$msg" &>/dev/null && echo -e "${GREEN}Committed${NC}"
}

push_changes() {
    branch=$(git rev-parse --abbrev-ref HEAD)
    git push origin "$branch" &>/dev/null && echo -e "${GREEN}Pushed to origin/$branch${NC}" || echo -e "${RED}Push failed${NC}"
}

pull_changes() {
    branch=$(git rev-parse --abbrev-ref HEAD)
    git pull origin "$branch" --rebase &>/dev/null && echo -e "${GREEN}Pulled latest${NC}" || echo -e "${RED}Pull failed${NC}"
}

new_branch() {
    read -rp "New branch name: " b
    [[ -z $b ]] && echo -e "${RED}No branch name${NC}" && return
    git checkout -b "$b" &>/dev/null && echo -e "${GREEN}Switched to $b${NC}"
}

create_release() {
    read -rp "Tag: " tag
    [[ -z $tag ]] && echo -e "${RED}No tag${NC}" && return
    read -rp "Message: " msg
    [[ -z $msg ]] && msg="Release $tag"
    git tag -a "$tag" -m "$msg" &>/dev/null
    git push origin "$tag" &>/dev/null && echo -e "${GREEN}Release $tag created${NC}" || echo -e "${RED}Push tag failed${NC}"
}

sync_fork() {
    git remote get-url upstream &>/dev/null || { echo -e "${RED}No upstream remote${NC}"; return; }
    branch=$(git rev-parse --abbrev-ref HEAD)
    git fetch upstream &>/dev/null
    git rebase upstream/"$branch" &>/dev/null && git push origin "$branch" &>/dev/null && echo -e "${GREEN}Synced with upstream${NC}" || echo -e "${RED}Sync failed${NC}"
}

while true; do
    echo -e "\n${MAGENTA}Git Helper${NC}"
    echo -e "${YELLOW}1) Status 2) Commit 3) Push 4) Pull 5) New branch 6) Release 7) Sync fork 8) Exit${NC}"
    read -rp "Choice: " c
    case $c in
        1) status ;;
        2) commit_changes ;;
        3) push_changes ;;
        4) pull_changes ;;
        5) new_branch ;;
        6) create_release ;;
        7) sync_fork ;;
        8) echo -e "${GREEN}Bye${NC}"; exit ;;
        *) echo -e "${RED}Invalid${NC}" ;;
    esac
done
